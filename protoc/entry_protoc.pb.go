// Code generated by protoc-gen-go.
// source: entry_protoc.proto
// DO NOT EDIT!

/*
Package protoc is a generated protocol buffer package.

It is generated from these files:
	entry_protoc.proto

It has these top-level messages:
	Entry
	Header
	Column
	RowData
	RowChange
	TransactionBegin
	TransactionEnd
	Pair
*/
package protoc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 标识事务的开始，变更数据，结束的事件类型
type EntryType int32

const (
	EntryType_TRANSACTION_BEGIN EntryType = 0
	EntryType_ROWDATA           EntryType = 1
	EntryType_TRANSACTION_END   EntryType = 2
	// 心跳类型，内部使用，外部暂不可见
	EntryType_HEARTBEAT EntryType = 3
)

var EntryType_name = map[int32]string{
	0: "TRANSACTION_BEGIN",
	1: "ROWDATA",
	2: "TRANSACTION_END",
	3: "HEARTBEAT",
}
var EntryType_value = map[string]int32{
	"TRANSACTION_BEGIN": 0,
	"ROWDATA":           1,
	"TRANSACTION_END":   2,
	"HEARTBEAT":         3,
}

func (x EntryType) String() string {
	return proto.EnumName(EntryType_name, int32(x))
}
func (EntryType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 事件类型
type EventType int32

const (
	EventType_INSERT   EventType = 0
	EventType_UPDATE   EventType = 1
	EventType_DELETE   EventType = 2
	EventType_CREATE   EventType = 3
	EventType_ALTER    EventType = 4
	EventType_DROP     EventType = 5
	EventType_QUERY    EventType = 6
	EventType_TRUNCATE EventType = 7
	EventType_RENAME   EventType = 8
	// CREATE INDEX
	EventType_CINDEX EventType = 9
	EventType_DINDEX EventType = 10
)

var EventType_name = map[int32]string{
	0:  "INSERT",
	1:  "UPDATE",
	2:  "DELETE",
	3:  "CREATE",
	4:  "ALTER",
	5:  "DROP",
	6:  "QUERY",
	7:  "TRUNCATE",
	8:  "RENAME",
	9:  "CINDEX",
	10: "DINDEX",
}
var EventType_value = map[string]int32{
	"INSERT":   0,
	"UPDATE":   1,
	"DELETE":   2,
	"CREATE":   3,
	"ALTER":    4,
	"DROP":     5,
	"QUERY":    6,
	"TRUNCATE": 7,
	"RENAME":   8,
	"CINDEX":   9,
	"DINDEX":   10,
}

func (x EventType) String() string {
	return proto.EnumName(EventType_name, int32(x))
}
func (EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 数据库类型
type Type int32

const (
	Type_ORACLE Type = 0
	Type_MYSQL  Type = 1
	Type_PGSQL  Type = 2
)

var Type_name = map[int32]string{
	0: "ORACLE",
	1: "MYSQL",
	2: "PGSQL",
}
var Type_value = map[string]int32{
	"ORACLE": 0,
	"MYSQL":  1,
	"PGSQL":  2,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}
func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Entry struct {
	// 协议头部信息
	Header *Header `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 事件类型
	EntryType EntryType `protobuf:"varint,2,opt,name=entryType,enum=protoc.EntryType" json:"entryType,omitempty"`
	// 传输的二进制数组
	StoreValue []byte `protobuf:"bytes,3,opt,name=storeValue,proto3" json:"storeValue,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (m *Entry) String() string            { return proto.CompactTextString(m) }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Entry) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

// message Header
type Header struct {
	// 协议的版本号
	Version int32 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// binlog
	LogfileName string `protobuf:"bytes,2,opt,name=logfileName" json:"logfileName,omitempty"`
	// binlog 文件的偏移位置
	LogfileOffset int64 `protobuf:"varint,3,opt,name=logfileOffset" json:"logfileOffset,omitempty"`
	// 服务端serverId
	ServerId int64 `protobuf:"varint,4,opt,name=serverId" json:"serverId,omitempty"`
	// 变更数据的编码
	ServerEncode string `protobuf:"bytes,5,opt,name=serverEncode" json:"serverEncode,omitempty"`
	// 变更数据的执行时间
	ExecuteTime int64 `protobuf:"varint,6,opt,name=executeTime" json:"executeTime,omitempty"`
	// 变更数据的来源
	SourceType Type `protobuf:"varint,7,opt,name=sourceType,enum=protoc.Type" json:"sourceType,omitempty"`
	// 变更数据的schema name
	SchemaName string `protobuf:"bytes,8,opt,name=schemaName" json:"schemaName,omitempty"`
	// 变更数据的table name
	TableName string `protobuf:"bytes,9,opt,name=tableName" json:"tableName,omitempty"`
	// 每个event的长度
	EventLength int64 `protobuf:"varint,10,opt,name=eventLength" json:"eventLength,omitempty"`
	// GTID string
	Gtid string `protobuf:"bytes,11,opt,name=gtid" json:"gtid,omitempty"`
	// last committed id
	LastCommitted int64 `protobuf:"varint,12,opt,name=lastCommitted" json:"lastCommitted,omitempty"`
	// sequence number
	SeqNum int64 `protobuf:"varint,13,opt,name=seqNum" json:"seqNum,omitempty"`
	// 数据变更类型
	EventType EventType `protobuf:"varint,14,opt,name=eventType,enum=protoc.EventType" json:"eventType,omitempty"`
	// 预留扩展
	Props []*Pair `protobuf:"bytes,15,rep,name=props" json:"props,omitempty"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Header) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// 每个字段的数据结构
type Column struct {
	// 字段下标
	Index int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	// 字段类型
	SqlType int32 `protobuf:"varint,2,opt,name=sqlType" json:"sqlType,omitempty"`
	// 字段名称(忽略大小写)，在mysql中是没有的
	Name string `protobuf:"bytes,3,opt,name=name" json:"name,omitempty"`
	// 是否是主键
	IsKey bool `protobuf:"varint,4,opt,name=isKey" json:"isKey,omitempty"`
	// 如果EventType=UPDATE,用于标识这个字段值是否有修改
	Updated bool `protobuf:"varint,5,opt,name=updated" json:"updated,omitempty"`
	// 标识是否为空
	IsNull bool `protobuf:"varint,6,opt,name=isNull" json:"isNull,omitempty"`
	// 字段值,timestamp,Datetime是一个时间格式的文本
	Value string `protobuf:"bytes,7,opt,name=value" json:"value,omitempty"`
	// 对应数据对象原始长度
	Length int32 `protobuf:"varint,8,opt,name=length" json:"length,omitempty"`
	// 字段mysql类型
	MysqlType string `protobuf:"bytes,9,opt,name=mysqlType" json:"mysqlType,omitempty"`
	// 预留扩展
	Props []*Pair `protobuf:"bytes,10,rep,name=props" json:"props,omitempty"`
}

func (m *Column) Reset()                    { *m = Column{} }
func (m *Column) String() string            { return proto.CompactTextString(m) }
func (*Column) ProtoMessage()               {}
func (*Column) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Column) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

type RowData struct {
	// 字段信息，增量数据(修改前,删除前)
	BeforeColumns []*Column `protobuf:"bytes,1,rep,name=beforeColumns" json:"beforeColumns,omitempty"`
	// 字段信息，增量数据(修改后,新增后)
	AfterColumns []*Column `protobuf:"bytes,2,rep,name=afterColumns" json:"afterColumns,omitempty"`
	// 预留扩展
	Props []*Pair `protobuf:"bytes,3,rep,name=props" json:"props,omitempty"`
}

func (m *RowData) Reset()                    { *m = RowData{} }
func (m *RowData) String() string            { return proto.CompactTextString(m) }
func (*RowData) ProtoMessage()               {}
func (*RowData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RowData) GetBeforeColumns() []*Column {
	if m != nil {
		return m.BeforeColumns
	}
	return nil
}

func (m *RowData) GetAfterColumns() []*Column {
	if m != nil {
		return m.AfterColumns
	}
	return nil
}

func (m *RowData) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// message row 每行变更数据的数据结构
type RowChange struct {
	// tableId,由数据库产生
	TableId int64 `protobuf:"varint,1,opt,name=tableId" json:"tableId,omitempty"`
	// 数据变更类型
	EventType EventType `protobuf:"varint,2,opt,name=eventType,enum=protoc.EventType" json:"eventType,omitempty"`
	// 标识是否是ddl语句
	IsDDL bool `protobuf:"varint,10,opt,name=isDDL" json:"isDDL,omitempty"`
	// ddl/query的sql语句
	Sql string `protobuf:"bytes,11,opt,name=sql" json:"sql,omitempty"`
	// 一次数据库变更可能存在多行
	RowDatas []*RowData `protobuf:"bytes,12,rep,name=rowDatas" json:"rowDatas,omitempty"`
	// ddl/query的schemaName，会存在跨库ddl，需要保留执行ddl的当前schemaName
	DdlSchemaName string `protobuf:"bytes,13,opt,name=ddlSchemaName" json:"ddlSchemaName,omitempty"`
	// 预留扩展
	Props []*Pair `protobuf:"bytes,14,rep,name=props" json:"props,omitempty"`
}

func (m *RowChange) Reset()                    { *m = RowChange{} }
func (m *RowChange) String() string            { return proto.CompactTextString(m) }
func (*RowChange) ProtoMessage()               {}
func (*RowChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *RowChange) GetRowDatas() []*RowData {
	if m != nil {
		return m.RowDatas
	}
	return nil
}

func (m *RowChange) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// 开始事务的一些信息
type TransactionBegin struct {
	// 执行的thread Id
	ThreadId int64 `protobuf:"varint,1,opt,name=threadId" json:"threadId,omitempty"`
	// 预留扩展
	Props []*Pair `protobuf:"bytes,2,rep,name=props" json:"props,omitempty"`
}

func (m *TransactionBegin) Reset()                    { *m = TransactionBegin{} }
func (m *TransactionBegin) String() string            { return proto.CompactTextString(m) }
func (*TransactionBegin) ProtoMessage()               {}
func (*TransactionBegin) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TransactionBegin) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// 结束事务的一些信息
type TransactionEnd struct {
	// 事务号
	TransactionId string `protobuf:"bytes,1,opt,name=transactionId" json:"transactionId,omitempty"`
	// 预留扩展
	Props []*Pair `protobuf:"bytes,2,rep,name=props" json:"props,omitempty"`
}

func (m *TransactionEnd) Reset()                    { *m = TransactionEnd{} }
func (m *TransactionEnd) String() string            { return proto.CompactTextString(m) }
func (*TransactionEnd) ProtoMessage()               {}
func (*TransactionEnd) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TransactionEnd) GetProps() []*Pair {
	if m != nil {
		return m.Props
	}
	return nil
}

// 预留扩展
type Pair struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Pair) Reset()                    { *m = Pair{} }
func (m *Pair) String() string            { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()               {}
func (*Pair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func init() {
	proto.RegisterType((*Entry)(nil), "protoc.Entry")
	proto.RegisterType((*Header)(nil), "protoc.Header")
	proto.RegisterType((*Column)(nil), "protoc.Column")
	proto.RegisterType((*RowData)(nil), "protoc.RowData")
	proto.RegisterType((*RowChange)(nil), "protoc.RowChange")
	proto.RegisterType((*TransactionBegin)(nil), "protoc.TransactionBegin")
	proto.RegisterType((*TransactionEnd)(nil), "protoc.TransactionEnd")
	proto.RegisterType((*Pair)(nil), "protoc.Pair")
	proto.RegisterEnum("protoc.EntryType", EntryType_name, EntryType_value)
	proto.RegisterEnum("protoc.EventType", EventType_name, EventType_value)
	proto.RegisterEnum("protoc.Type", Type_name, Type_value)
}

func init() { proto.RegisterFile("entry_protoc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 865 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5f, 0x6f, 0xe3, 0xc4,
	0x17, 0xad, 0xed, 0x38, 0xb1, 0x6f, 0xfe, 0xd4, 0x3b, 0xbf, 0x1f, 0xc8, 0x42, 0x08, 0x45, 0x11,
	0x42, 0x51, 0x41, 0x45, 0x2a, 0x7c, 0x01, 0x37, 0x1e, 0xed, 0x46, 0x64, 0x9d, 0xee, 0xc4, 0x05,
	0x96, 0x97, 0x95, 0x1b, 0x4f, 0x12, 0x0b, 0xc7, 0x4e, 0xed, 0x49, 0x77, 0xf3, 0x06, 0x12, 0xaf,
	0x3c, 0xf3, 0x49, 0x79, 0x47, 0x73, 0xfd, 0x37, 0x88, 0x4a, 0xfb, 0xd4, 0x7b, 0xce, 0xdc, 0x39,
	0x73, 0xef, 0xb9, 0xd7, 0x29, 0x10, 0x9e, 0x88, 0xec, 0xf4, 0xee, 0x90, 0xa5, 0x22, 0x5d, 0x5f,
	0xe3, 0x1f, 0xd2, 0x2d, 0xd0, 0xe4, 0x37, 0x05, 0x74, 0x2a, 0x8f, 0xc9, 0x57, 0xd0, 0xdd, 0xf1,
	0x20, 0xe4, 0x99, 0xad, 0x8c, 0x95, 0x69, 0xff, 0x66, 0x74, 0x5d, 0x5e, 0x78, 0x85, 0x2c, 0x2b,
	0x4f, 0xc9, 0xb7, 0x60, 0xa2, 0x9e, 0x7f, 0x3a, 0x70, 0x5b, 0x1d, 0x2b, 0xd3, 0xd1, 0xcd, 0x8b,
	0x2a, 0x95, 0x56, 0x07, 0xac, 0xc9, 0x21, 0x5f, 0x00, 0xe4, 0x22, 0xcd, 0xf8, 0x8f, 0x41, 0x7c,
	0xe4, 0xb6, 0x36, 0x56, 0xa6, 0x03, 0xd6, 0x62, 0x26, 0xbf, 0x77, 0xa0, 0x5b, 0xbc, 0x41, 0x6c,
	0xe8, 0x3d, 0xf1, 0x2c, 0x8f, 0xd2, 0x04, 0x8b, 0xd0, 0x59, 0x05, 0xc9, 0x18, 0xfa, 0x71, 0xba,
	0xdd, 0x44, 0x31, 0xf7, 0x82, 0x7d, 0xf1, 0xae, 0xc9, 0xda, 0x14, 0xf9, 0x12, 0x86, 0x25, 0x5c,
	0x6e, 0x36, 0x39, 0x17, 0xf8, 0x92, 0xc6, 0xce, 0x49, 0xf2, 0x19, 0x18, 0x39, 0xcf, 0x9e, 0x78,
	0x36, 0x0f, 0xed, 0x0e, 0x26, 0xd4, 0x98, 0x4c, 0x60, 0x50, 0xc4, 0x34, 0x59, 0xa7, 0x21, 0xb7,
	0x75, 0x7c, 0xe4, 0x8c, 0x93, 0x75, 0xf0, 0x0f, 0x7c, 0x7d, 0x14, 0xdc, 0x8f, 0xf6, 0xdc, 0xee,
	0xa2, 0x44, 0x9b, 0x22, 0xdf, 0x00, 0xe4, 0xe9, 0x31, 0x5b, 0x73, 0x34, 0xa8, 0x87, 0x06, 0x0d,
	0x2a, 0x83, 0xd0, 0x9b, 0xd6, 0x39, 0x9a, 0xb3, 0xde, 0xf1, 0x7d, 0x80, 0x6d, 0x19, 0xf8, 0x62,
	0x8b, 0x21, 0x9f, 0x83, 0x29, 0x82, 0x87, 0xb2, 0x6b, 0x13, 0x8f, 0x1b, 0x02, 0xab, 0x79, 0xe2,
	0x89, 0x58, 0xf0, 0x64, 0x2b, 0x76, 0x36, 0x94, 0xd5, 0x34, 0x14, 0x21, 0xd0, 0xd9, 0x8a, 0x28,
	0xb4, 0xfb, 0x78, 0x15, 0x63, 0x74, 0x2a, 0xc8, 0xc5, 0x2c, 0xdd, 0xef, 0x23, 0x21, 0x78, 0x68,
	0x0f, 0x4a, 0xa7, 0xda, 0x24, 0xf9, 0x14, 0xba, 0x39, 0x7f, 0xf4, 0x8e, 0x7b, 0x7b, 0x88, 0xc7,
	0x25, 0xc2, 0xf9, 0xcb, 0x07, 0xb0, 0xbd, 0xd1, 0xbf, 0xe6, 0x5f, 0x1d, 0xb0, 0x26, 0x87, 0x4c,
	0x40, 0x3f, 0x64, 0xe9, 0x21, 0xb7, 0x2f, 0xc7, 0xda, 0xb4, 0xdf, 0x78, 0x71, 0x17, 0x44, 0x19,
	0x2b, 0x8e, 0x26, 0x7f, 0xa8, 0xd0, 0x9d, 0xa5, 0xf1, 0x71, 0x9f, 0x90, 0xff, 0x83, 0x1e, 0x25,
	0x21, 0xff, 0x50, 0x6e, 0x40, 0x01, 0xe4, 0x66, 0xe4, 0x8f, 0x71, 0xbd, 0x73, 0x3a, 0xab, 0xa0,
	0xec, 0x30, 0x91, 0xe6, 0x68, 0x45, 0x87, 0x32, 0x46, 0x8d, 0xfc, 0x07, 0x7e, 0xc2, 0x11, 0x1b,
	0xac, 0x00, 0x52, 0xe3, 0x78, 0x08, 0x03, 0xd9, 0xb1, 0x8e, 0x7c, 0x05, 0x65, 0xaf, 0x51, 0xee,
	0x1d, 0xe3, 0x18, 0x07, 0x6a, 0xb0, 0x12, 0x49, 0x9d, 0x27, 0xdc, 0xda, 0x1e, 0x8a, 0x17, 0x40,
	0x66, 0xc7, 0x85, 0xe1, 0x06, 0x96, 0x52, 0x22, 0x39, 0xab, 0xfd, 0xa9, 0xaa, 0xb2, 0x9c, 0x55,
	0x4d, 0x34, 0x36, 0xc0, 0xf3, 0x36, 0xfc, 0xa5, 0x40, 0x8f, 0xa5, 0xef, 0xdd, 0x40, 0x04, 0xe4,
	0x7b, 0x18, 0x3e, 0xf0, 0x4d, 0x9a, 0xf1, 0xc2, 0x97, 0xdc, 0x56, 0xf0, 0x5e, 0xfd, 0x59, 0x16,
	0x34, 0x3b, 0x4f, 0x22, 0x37, 0x30, 0x08, 0x36, 0x82, 0x67, 0xd5, 0x25, 0xf5, 0x3f, 0x2f, 0x9d,
	0xe5, 0x34, 0x95, 0x69, 0xcf, 0x57, 0xf6, 0xb7, 0x02, 0x26, 0x4b, 0xdf, 0xcf, 0x76, 0x41, 0xb2,
	0xe5, 0xd2, 0x49, 0x5c, 0xc2, 0x79, 0x88, 0x53, 0xd2, 0x58, 0x05, 0xcf, 0xb7, 0x43, 0xfd, 0x88,
	0xed, 0xc0, 0x51, 0xb9, 0xee, 0x02, 0x97, 0x17, 0x47, 0xe5, 0xba, 0x0b, 0x62, 0x81, 0x96, 0x3f,
	0xc6, 0xe5, 0xd6, 0xca, 0x90, 0x7c, 0x0d, 0x46, 0x56, 0x38, 0x93, 0xdb, 0x03, 0xac, 0xf3, 0xb2,
	0xd2, 0x2d, 0x1d, 0x63, 0x75, 0x82, 0xdc, 0xf0, 0x30, 0x8c, 0x57, 0xcd, 0x87, 0x35, 0x44, 0xa1,
	0x73, 0xb2, 0xe9, 0x7b, 0xf4, 0x7c, 0xdf, 0x0c, 0x2c, 0x3f, 0x0b, 0x92, 0x3c, 0x58, 0x8b, 0x28,
	0x4d, 0x6e, 0xf9, 0x36, 0x4a, 0xe4, 0x6f, 0x88, 0xd8, 0x65, 0x3c, 0x08, 0xeb, 0xf6, 0x6b, 0xdc,
	0x68, 0xaa, 0xcf, 0x6b, 0xfe, 0x02, 0xa3, 0x96, 0x26, 0x4d, 0xf0, 0x8b, 0x14, 0x0d, 0x53, 0xca,
	0x9a, 0xec, 0x9c, 0xfc, 0x28, 0xed, 0x6b, 0xe8, 0x48, 0x28, 0x0d, 0xfc, 0x95, 0x9f, 0x4a, 0x1d,
	0x19, 0x36, 0xbb, 0xac, 0xb6, 0x76, 0xf9, 0x6a, 0x05, 0x66, 0xfd, 0xa3, 0x4d, 0x3e, 0x81, 0x17,
	0x3e, 0x73, 0xbc, 0x95, 0x33, 0xf3, 0xe7, 0x4b, 0xef, 0xdd, 0x2d, 0x7d, 0x39, 0xf7, 0xac, 0x0b,
	0xd2, 0x87, 0x1e, 0x5b, 0xfe, 0xe4, 0x3a, 0xbe, 0x63, 0x29, 0xe4, 0x7f, 0x70, 0xd9, 0xce, 0xa1,
	0x9e, 0x6b, 0xa9, 0x64, 0x08, 0xe6, 0x2b, 0xea, 0x30, 0xff, 0x96, 0x3a, 0xbe, 0xa5, 0x5d, 0xfd,
	0xa9, 0x80, 0x59, 0x0f, 0x9b, 0x00, 0x74, 0xe7, 0xde, 0x8a, 0x32, 0xdf, 0xba, 0x90, 0xf1, 0xfd,
	0x9d, 0xeb, 0xf8, 0xd4, 0x52, 0x64, 0xec, 0xd2, 0x05, 0xf5, 0xa9, 0xa5, 0xca, 0x78, 0xc6, 0xa8,
	0xe4, 0x35, 0x62, 0x82, 0xee, 0x2c, 0x7c, 0xca, 0xac, 0x0e, 0x31, 0xa0, 0xe3, 0xb2, 0xe5, 0x9d,
	0xa5, 0x4b, 0xf2, 0xcd, 0x3d, 0x65, 0x6f, 0xad, 0x2e, 0x19, 0x80, 0xe1, 0xb3, 0x7b, 0x6f, 0x26,
	0xb3, 0x7b, 0xf2, 0x26, 0xa3, 0x9e, 0xf3, 0x9a, 0x5a, 0x06, 0xaa, 0xcc, 0x3d, 0x97, 0xfe, 0x6c,
	0x99, 0xa8, 0x5e, 0xc4, 0x70, 0x35, 0x85, 0x4e, 0x55, 0xc9, 0x92, 0x39, 0xb3, 0x05, 0xb5, 0x2e,
	0xa4, 0xe0, 0xeb, 0xb7, 0xab, 0x37, 0x0b, 0x4b, 0x91, 0xe1, 0xdd, 0x4b, 0x19, 0xaa, 0x0f, 0xc5,
	0xbf, 0xc5, 0xef, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xdd, 0x39, 0xef, 0x33, 0x07, 0x00,
	0x00,
}
